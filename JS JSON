### **JavaScript JSON (JavaScript Object Notation)**

**JSON** is a lightweight data interchange format. It's easy for humans to read and write, and easy for machines to parse and generate. JSON is commonly used to transmit data between a server and a web application.

JSON is a string representation of JavaScript objects and arrays, with strict syntax rules:

- Data is in name/value pairs.
- Data is separated by commas.
- Curly braces `{}` hold objects.
- Square brackets `[]` hold arrays.

### **Defining a JSON Object**

Here’s an example of a JSON object:

```json
{
  "name": "John",
  "age": 30,
  "isEmployed": true,
  "hobbies": ["reading", "traveling", "gaming"],
  "address": {
    "street": "123 Main St",
    "city": "New York",
    "zipcode": "10001"
  }
}
```

### **JavaScript JSON Parsing and Stringifying**

JavaScript provides two main methods for working with JSON:

1. **`JSON.parse()`**: Converts a JSON string into a JavaScript object.
2. **`JSON.stringify()`**: Converts a JavaScript object into a JSON string.

### **Parsing JSON**

To parse JSON into a JavaScript object, use `JSON.parse()`:

```javascript
const jsonString = '{"name": "John", "age": 30, "isEmployed": true}';
const parsedObject = JSON.parse(jsonString);

console.log(parsedObject.name); // John
console.log(parsedObject.age);  // 30
console.log(parsedObject.isEmployed); // true
```

### **Stringifying JavaScript Object to JSON**

To convert a JavaScript object into a JSON string, use `JSON.stringify()`:

```javascript
const user = {
  name: "John",
  age: 30,
  isEmployed: true
};

const jsonString = JSON.stringify(user);
console.log(jsonString);
// Output: {"name":"John","age":30,"isEmployed":true}
```

### **Example: Sending JSON Data to a Server**

In modern web development, JSON is often used to send data between a server and a client (e.g., using `fetch()` for HTTP requests).

Here’s how to send JSON data using `fetch()`:

```javascript
const data = {
  name: "John",
  age: 30,
  isEmployed: true
};

fetch('https://api.example.com/data', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(data)
})
.then(response => response.json())
.then(result => console.log('Success:', result))
.catch(error => console.error('Error:', error));
```

### **Example: Receiving JSON Data from a Server**

Here’s how to receive and parse JSON data using `fetch()`:

```javascript
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => {
    console.log('Received Data:', data);
    console.log('Name:', data.name);
  })
  .catch(error => console.error('Error:', error));
```

### **Rules for JSON**

1. **Keys must be strings**: In JSON, all keys must be enclosed in double quotes.
2. **Values must be one of the following types**:
   - String (in double quotes)
   - Number (integers or floats)
   - Boolean (`true` or `false`)
   - Array
   - Object
   - `null`

### **Example: Nested JSON Object**

```json
{
  "name": "John",
  "age": 30,
  "address": {
    "street": "123 Main St",
    "city": "New York",
    "zipcode": "10001"
  },
  "hobbies": ["reading", "gaming"],
  "isEmployed": true
}
```

You can access nested properties using dot notation or bracket notation:

```javascript
const user = {
  name: "John",
  age: 30,
  address: {
    street: "123 Main St",
    city: "New York",
    zipcode: "10001"
  }
};

console.log(user.address.city); // New York
```

### **Difference between JSON and JavaScript Object**

- **JSON**: Data format used for transferring data; keys and values must be strings, arrays, or objects.
- **JavaScript Object**: Used in code to store data; keys can be any valid identifier, including strings or variables.
