
### Hoisting with `var`

When you declare a variable using `var`, the declaration is hoisted to the top of its function scope. However, the initialization remains in place.

```javascript
console.log(a); // Outputs: undefined
var a = 5;
console.log(a); // Outputs: 5
```

#### Explanation

1. **Hoisting**: The declaration `var a;` is hoisted to the top of the scope.
2. **Initialization**: The initialization `a = 5;` stays in its original place.
3. **Result**: When `console.log(a);` is called before the initialization, `a` is `undefined` because only the declaration is hoisted, not the initialization.

The code is interpreted like this:

```javascript
var a; // Declaration is hoisted
console.log(a); // Outputs: undefined
a = 5; // Initialization stays in place
console.log(a); // Outputs: 5
```

### Hoisting with Functions

Function declarations are fully hoisted, meaning both the declaration and the definition are moved to the top of the scope. This allows you to call a function before it is declared in the code.

```javascript
greet(); // Outputs: Hello, World!

function greet() {
    console.log('Hello, World!');
}
```

#### Explanation

1. **Hoisting**: The entire function declaration `function greet() { ... }` is hoisted to the top of the scope.
2. **Result**: You can call the function `greet()` before its declaration in the code because the function definition is fully hoisted.

The code is interpreted like this:

```javascript
function greet() {
    console.log('Hello, World!');
}

greet(); // Outputs: Hello, World!
```

### Hoisting with Function Expressions

Function expressions are not hoisted in the same way as function declarations. Only the variable declaration is hoisted, not the function definition.

```javascript
// TypeError: greet is not a function
greet();

var greet = function() {
    console.log('Hello, World!');
};
```

#### Explanation

1. **Hoisting**: The declaration `var greet;` is hoisted to the top, but the function definition `greet = function() { ... }` is not.
2. **Result**: When you call `greet()` before the function expression, it results in a `TypeError` because `greet` is `undefined` at that point.

The code is interpreted like this:

```javascript
var greet; // Declaration is hoisted
greet(); // TypeError: greet is not a function
greet = function() {
    console.log('Hello, World!');
};
```

### Summary

- **`var` Hoisting**: The variable declaration is hoisted, but the initialization is not.
- **Function Declaration Hoisting**: Both the declaration and definition are hoisted, allowing the function to be called before its declaration in the code.
- **Function Expression Hoisting**: Only the variable declaration is hoisted, not the function definition, leading to `TypeError` if called before initialization.
