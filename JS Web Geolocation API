The JavaScript Web Geolocation API allows web applications to access the geographical location of a user's device. This can be useful for a variety of applications, such as mapping, location-based services, or tracking. The Geolocation API is supported by most modern browsers and provides methods for retrieving the user's current location as well as tracking the location over time.

### Basic Usage

#### 1. Getting the Current Position

To get the current geographical position of the user, you can use the `navigator.geolocation.getCurrentPosition()` method. This method takes two arguments: a success callback and an optional error callback.

```javascript
if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
        (position) => {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            console.log(`Latitude: ${latitude}, Longitude: ${longitude}`);
        },
        (error) => {
            console.error('Error getting location:', error);
        }
    );
} else {
    console.log("Geolocation is not supported by this browser.");
}
```

**Explanation:**
- `navigator.geolocation.getCurrentPosition()` requests the user's location.
- If the request is successful, the `position` object is passed to the success callback, containing latitude, longitude, and other details.
- If there is an error (e.g., user denies permission, or the location is unavailable), the error callback is invoked.

#### 2. Handling Errors

The error callback provides an object with an `error.code` and `error.message` to determine the cause of the failure:

```javascript
function handleError(error) {
    switch (error.code) {
        case error.PERMISSION_DENIED:
            console.error("User denied the request for Geolocation.");
            break;
        case error.POSITION_UNAVAILABLE:
            console.error("Location information is unavailable.");
            break;
        case error.TIMEOUT:
            console.error("The request to get user location timed out.");
            break;
        case error.UNKNOWN_ERROR:
            console.error("An unknown error occurred.");
            break;
    }
}

navigator.geolocation.getCurrentPosition(
    (position) => {
        console.log("Location retrieved successfully.");
    },
    handleError
);
```

**Explanation:**
- Different error codes help identify why the location request failed, allowing for better error handling.

#### 3. Watching the Position

If you want to track the user's location as it changes over time (e.g., for navigation purposes), you can use `navigator.geolocation.watchPosition()`:

```javascript
const watchId = navigator.geolocation.watchPosition(
    (position) => {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;
        console.log(`Updated Latitude: ${latitude}, Updated Longitude: ${longitude}`);
    },
    (error) => {
        console.error('Error watching position:', error);
    }
);

// To stop watching the user's position
navigator.geolocation.clearWatch(watchId);
```

**Explanation:**
- `watchPosition()` continuously calls the success callback with updated position data as the user moves.
- The `watchId` returned by `watchPosition()` can be used to stop tracking the user's location by calling `navigator.geolocation.clearWatch(watchId)`.

### Position Object

The `position` object returned in the success callback contains a `coords` property with the following useful properties:

- **`latitude`**: The latitude of the position in decimal degrees.
- **`longitude`**: The longitude of the position in decimal degrees.
- **`accuracy`**: The accuracy of the position in meters.
- **`altitude`**: The altitude of the position in meters above sea level (if available).
- **`altitudeAccuracy`**: The accuracy of the altitude in meters (if available).
- **`heading`**: The direction the device is moving in degrees relative to true north (if available).
- **`speed`**: The speed the device is traveling in meters per second (if available).

### Options

You can customize the behavior of the Geolocation API using an optional third parameter in both `getCurrentPosition()` and `watchPosition()` methods. The options object can contain:

- **`enableHighAccuracy`**: A boolean that indicates the application would like to receive the best possible results. Setting this to `true` may result in slower response times.
- **`timeout`**: The maximum time (in milliseconds) that the device is allowed to take to return a position.
- **`maximumAge`**: The maximum age (in milliseconds) of a cached position that is acceptable to return.

Example:

```javascript
const options = {
    enableHighAccuracy: true,
    timeout: 5000,
    maximumAge: 0
};

navigator.geolocation.getCurrentPosition(
    (position) => {
        console.log('High accuracy position:', position);
    },
    (error) => {
        console.error('Error:', error);
    },
    options
);
```
