
### 1. **Array `length`**
The `length` property returns the number of elements in an array.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
console.log(fruits.length); // Outputs: 3
```

### 2. **Array `toString()`**
The `toString()` method converts an array to a comma-separated string.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
console.log(fruits.toString()); // Outputs: "Apple,Banana,Orange"
```

### 3. **Array `at()`**
The `at()` method returns the element at the specified index. It supports negative indices, counting from the end of the array.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
console.log(fruits.at(1));   // Outputs: "Banana"
console.log(fruits.at(-1));  // Outputs: "Orange" (last element)
```

### 4. **Array `join()`**
The `join()` method joins all elements of an array into a string, with a specified separator.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
console.log(fruits.join(" - ")); // Outputs: "Apple - Banana - Orange"
```

### 5. **Array `pop()`**
The `pop()` method removes the last element from an array and returns it.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
let lastFruit = fruits.pop();
console.log(lastFruit);   // Outputs: "Orange"
console.log(fruits);      // Outputs: ["Apple", "Banana"]
```

### 6. **Array `push()`**
The `push()` method adds one or more elements to the end of an array and returns the new length.

```javascript
let fruits = ["Apple", "Banana"];
fruits.push("Orange");
console.log(fruits); // Outputs: ["Apple", "Banana", "Orange"]
```

### 7. **Array `shift()`**
The `shift()` method removes the first element from an array and returns it.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
let firstFruit = fruits.shift();
console.log(firstFruit);  // Outputs: "Apple"
console.log(fruits);      // Outputs: ["Banana", "Orange"]
```

### 8. **Array `unshift()`**
The `unshift()` method adds one or more elements to the beginning of an array and returns the new length.

```javascript
let fruits = ["Banana", "Orange"];
fruits.unshift("Apple");
console.log(fruits); // Outputs: ["Apple", "Banana", "Orange"]
```

### 9. **Array `delete`**
The `delete` operator removes an element from an array but does not affect the array's length. It leaves `undefined` in place of the deleted element.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
delete fruits[1];
console.log(fruits); // Outputs: ["Apple", undefined, "Orange"]
console.log(fruits.length); // Outputs: 3
```

### 10. **Array `concat()`**
The `concat()` method merges two or more arrays into one.

```javascript
let fruits = ["Apple", "Banana"];
let moreFruits = ["Orange", "Mango"];
let allFruits = fruits.concat(moreFruits);
console.log(allFruits); // Outputs: ["Apple", "Banana", "Orange", "Mango"]
```

### 11. **Array `copyWithin()`**
The `copyWithin()` method copies part of an array to another location within the same array, without changing its length.

```javascript
let fruits = ["Apple", "Banana", "Orange", "Mango"];
fruits.copyWithin(1, 2, 4);
console.log(fruits); // Outputs: ["Apple", "Orange", "Mango", "Mango"]
```

### 12. **Array `flat()`**
The `flat()` method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.

```javascript
let nestedArray = [1, [2, 3], [4, [5, 6]]];
let flatArray = nestedArray.flat(2);
console.log(flatArray); // Outputs: [1, 2, 3, 4, 5, 6]
```

### 13. **Array `splice()`**
The `splice()` method adds/removes elements from an array and returns the removed elements.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
fruits.splice(1, 1, "Mango", "Pineapple");
console.log(fruits); // Outputs: ["Apple", "Mango", "Pineapple", "Orange"]
```

### 14. **Array `toSpliced()`**
The `toSpliced()` method is like `splice()`, but it returns a new array without modifying the original array (ES2023).

```javascript
let fruits = ["Apple", "Banana", "Orange"];
let newFruits = fruits.toSpliced(1, 1, "Mango", "Pineapple");
console.log(fruits);    // Outputs: ["Apple", "Banana", "Orange"]
console.log(newFruits); // Outputs: ["Apple", "Mango", "Pineapple", "Orange"]
```

### 15. **Array `slice()`**
The `slice()` method returns a shallow copy of a portion of an array into a new array object.

```javascript
let fruits = ["Apple", "Banana", "Orange"];
let citrus = fruits.slice(1, 3);
console.log(citrus); // Outputs: ["Banana", "Orange"]
```
