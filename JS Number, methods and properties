
### 1. **JavaScript Numbers**

JavaScript numbers can be integers, floats, or special values like `Infinity` and `NaN` (Not a Number).

```javascript
let integer = 42;       // Integer
let float = 3.14;       // Floating-point number
let negative = -10;     // Negative number
let infinity = Infinity; // Special number: Infinity
let nan = NaN;          // Special number: Not a Number
```

### 2. **Number Methods**

JavaScript provides several methods to work with numbers. These methods can be used directly on number literals or on variables.

#### 2.1 `toString()`
Converts a number to a string.

```javascript
let num = 123;
console.log(num.toString()); // Outputs: "123"
```

#### 2.2 `toFixed()`
Formats a number to a specified number of decimal places.

```javascript
let num = 3.14159;
console.log(num.toFixed(2)); // Outputs: "3.14"
```

#### 2.3 `toExponential()`
Converts a number to an exponential notation.

```javascript
let num = 12345;
console.log(num.toExponential(2)); // Outputs: "1.23e+4"
```

#### 2.4 `toPrecision()`
Formats a number to a specified length.

```javascript
let num = 3.14159;
console.log(num.toPrecision(3)); // Outputs: "3.14"
```

#### 2.5 `valueOf()`
Returns the primitive value of a number.

```javascript
let num = 123;
console.log(num.valueOf()); // Outputs: 123
```

#### 2.6 `Number()`
Converts a string or other value to a number.

```javascript
let numStr = "123";
let num = Number(numStr);
console.log(num); // Outputs: 123
```

#### 2.7 `parseInt()`
Parses a string and returns an integer.

```javascript
let numStr = "123.45";
let num = parseInt(numStr);
console.log(num); // Outputs: 123
```

#### 2.8 `parseFloat()`
Parses a string and returns a floating-point number.

```javascript
let numStr = "123.45";
let num = parseFloat(numStr);
console.log(num); // Outputs: 123.45
```

#### 2.9 `isNaN()`
Checks if a value is `NaN` (Not a Number).

```javascript
let value = NaN;
console.log(isNaN(value)); // Outputs: true
```

#### 2.10 `isFinite()`
Checks if a value is a finite number.

```javascript
let num = 123;
console.log(isFinite(num)); // Outputs: true
console.log(isFinite(Infinity)); // Outputs: false
```

### 3. **Number Properties**

JavaScript provides several properties associated with numbers. These properties are static, meaning they belong to the `Number` object and not to individual number instances.

#### 3.1 `Number.MAX_VALUE`
Represents the maximum numeric value representable in JavaScript.

```javascript
console.log(Number.MAX_VALUE); // Outputs: 1.7976931348623157e+308
```

#### 3.2 `Number.MIN_VALUE`
Represents the smallest positive numeric value representable in JavaScript.

```javascript
console.log(Number.MIN_VALUE); // Outputs: 5e-324
```

#### 3.3 `Number.POSITIVE_INFINITY`
Represents positive infinity.

```javascript
console.log(Number.POSITIVE_INFINITY); // Outputs: Infinity
```

#### 3.4 `Number.NEGATIVE_INFINITY`
Represents negative infinity.

```javascript
console.log(Number.NEGATIVE_INFINITY); // Outputs: -Infinity
```

#### 3.5 `Number.NaN`
Represents the special "Not-a-Number" value.

```javascript
console.log(Number.NaN); // Outputs: NaN
```

#### 3.6 `Number.EPSILON`
Represents the difference between 1 and the smallest floating-point number greater than 1.

```javascript
console.log(Number.EPSILON); // Outputs: 2.220446049250313e-16
```

#### 3.7 `Number.MAX_SAFE_INTEGER`
Represents the maximum safe integer in JavaScript (`2^53 - 1`).

```javascript
console.log(Number.MAX_SAFE_INTEGER); // Outputs: 9007199254740991
```

#### 3.8 `Number.MIN_SAFE_INTEGER`
Represents the minimum safe integer in JavaScript (`-(2^53 - 1)`).

```javascript
console.log(Number.MIN_SAFE_INTEGER); // Outputs: -9007199254740991
```
